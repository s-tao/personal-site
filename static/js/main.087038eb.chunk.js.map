{"version":3,"sources":["Navbar/NavStyles.js","Navbar/index.js","styled.js","Homepage/index.js","About/index.js","Projects/index.js","App.js","serviceWorker.js","index.js"],"names":["NavContainer","styled","div","Navbar","LinkStyle","NavLink","props","color","hover","SocialMedia","IconStyle","FontAwesomeIcon","MobileNavContainer","MobileNavbar","MobileNavLink","MobileSocialMedia","a","MobileIconStyle","Nav","textColor","hoverColor","activeColor","useState","mobileNav","setMobileNav","isMobile","useEffect","window","innerWidth","handleResize","addEventListener","removeEventListener","exact","to","icon","faHome","size","faUser","faBook","href","faLinkedin","faGithubSquare","activeClassName","activeStyle","Page","Homepage","About","Projects","App","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.087038eb.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nexport const NavContainer = styled.div`\n  display: flex;\n  margin: 25px;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Navbar = styled.div`\n  display: flex;\n`;\n\nexport const LinkStyle = styled(NavLink)`\n  padding: 0 15px;\n  text-decoration: none;\n  font-weight: bold;\n  color: ${props => props.color};\n  :hover {\n      color: ${props => props.hover};\n  }\n`;\n\nexport const SocialMedia = styled.div`\n  display: flex;\n  height: 25px;\n`;\n\nexport const IconStyle = styled(FontAwesomeIcon)`\n  margin: 0 12px;\n  color: ${props => props.color};\n  :hover {\n      color: ${props => props.hover};\n`;\n\n/* mobile responsive */\nexport const MobileNavContainer = styled(NavContainer)`\n  position: fixed;\n  width: 100vw;\n  bottom: 0;\n  margin: 0;\n  padding: 12px 24px;\n  background-color: #FFFFFF;\n  -webkit-box-shadow: 0px -1px 2px rgba(230,230,230,1);\n  -moz-box-shadow: 0px -1px 2px rgba(230,230,230,1);\n  box-shadow: 0px -1px 2px rgba(230,230,230,1);\n`;\n\nexport const MobileNavbar = styled(Navbar)`\n  flex: 1;\n  padding: 0;\n  justify-content: space-around;\n  font-size: 12px;\n`;\n\nexport const MobileNavLink = styled(NavLink)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const MobileSocialMedia = styled.a`\n  color: ${props => props.color};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const MobileIconStyle = styled(IconStyle)`\n`;\n","import React, { useEffect, useState } from 'react';\nimport { NavContainer, \n         Navbar, \n         SocialMedia, \n         IconStyle, \n         LinkStyle,\n         MobileNavContainer,\n         MobileNavbar,\n         MobileNavLink,\n         MobileIconStyle,\n         MobileSocialMedia\n       } from './NavStyles.js';\nimport { faLinkedin, faGithubSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faHome, faUser, faBook } from '@fortawesome/free-solid-svg-icons'\n\nconst Nav = ({ textColor, hoverColor, activeColor }) => {\n  \n  const [mobileNav, setMobileNav] = useState(null);\n  const isMobile = mobileNav <= 640;\n\n  useEffect(() => {\n    setMobileNav(window.innerWidth);\n  }, []);\n\n  useEffect(() => {\n    // may switch to function dec. for global access\n    const handleResize = () => {\n      setMobileNav(window.innerWidth);\n    }\n  \n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize)\n  }, []);\n\n\n  return (\n    <>\n      {isMobile ? (\n        <MobileNavContainer>\n          <MobileNavbar>\n            <MobileNavLink exact to=\"/\">\n              <MobileIconStyle icon={faHome}\n                               color={hoverColor}\n                               size=\"2x\">\n              </MobileIconStyle>\n              Home\n            </MobileNavLink>\n            <MobileNavLink to=\"/about\">\n              <MobileIconStyle icon={faUser}\n                               color={hoverColor}\n                               size=\"2x\">\n              </MobileIconStyle>\n              About\n            </MobileNavLink>\n            <MobileNavLink to=\"/projects\">\n              <MobileIconStyle icon={faBook}\n                               color={hoverColor}\n                               size=\"2x\">\n              </MobileIconStyle>\n              Projects\n            </MobileNavLink>\n            <MobileSocialMedia a href=\"https://www.linkedin.com/in/sarahtao/\">\n              <MobileIconStyle icon={faLinkedin}\n                               color={hoverColor}\n                               size=\"2x\">\n              </MobileIconStyle>\n              LinkedIn\n            </MobileSocialMedia>\n            <MobileSocialMedia a href=\"https://github.com/s-tao\">\n              <MobileIconStyle icon={faGithubSquare}\n                               color={hoverColor}\n                               size=\"2x\">\n              </MobileIconStyle>\n              Github\n            </MobileSocialMedia>\n          </MobileNavbar>\n        </MobileNavContainer>\n      ) : (\n        <NavContainer>\n          <Navbar>\n            <LinkStyle exact to=\"/\" \n                      color={textColor}\n                      hover={hoverColor}\n                      activeClassName=\"selected\"\n                      activeStyle={{ color: activeColor }}>\n              HOME\n            </LinkStyle>  \n            <LinkStyle to=\"/about\" \n                      color={textColor}\n                      hover={hoverColor}\n                      activeClassName=\"selected\"\n                      activeStyle={{ color: activeColor }}>\n              ABOUT\n            </LinkStyle> \n            <LinkStyle to=\"/projects\" \n                      color={textColor}\n                      hover={hoverColor}\n                      activeClassName=\"selected\"\n                      activeStyle={{ color: activeColor }}>\n              PROJECTS\n            </LinkStyle> \n          </Navbar>\n    \n          <SocialMedia>\n            <a href=\"https://www.linkedin.com/in/sarahtao/\">\n                <IconStyle icon={faLinkedin} \n                          size=\"2x\"\n                          color={textColor}\n                          hover={hoverColor}\n                          />\n            </a>\n            <a href=\"https://github.com/s-tao\">\n                <IconStyle icon={faGithubSquare} \n                          color={textColor}\n                          hover={hoverColor}\n                          size=\"2x\"/>\n            </a>\n          </SocialMedia>\n      </NavContainer>\n      )}\n      \n    </>\n  );\n}\n\nexport default Nav;","import styled from 'styled-components';\n\n\nexport const Page = styled.div`\n  background-color: #FFC300 ;\n  margin: 0;\n  padding: 0;\n  height: 100vh;\n  overflow: hidden;\n`;\n\n\nexport const Container = styled.div`\n  ${'' /* justify-content: center; */}\n  display: flex;\n  margin: auto;\n  height: 100vh;\n  width: 100%;\n  flex-wrap: wrap;\n  ${'' /* padding: 15px; */}\n`;\n\nexport const FlipContainer = styled.div`\n  ${'' /* position: absolute; */}\n  justify-content: center;\n  align-items: center;\n  width: 680px;\n  height: 300px;\n  margin: auto 8%;\n  padding: 3%; \n  display: grid;\n  background-color: #ffffff;\n  opacity: 95%;\n  ${'' /* outline: solid 1px #c1cfd3; */}\n  overflow-x: hidden;\n  overflow-y: auto;\n  border-radius: 5px;\n`;\n      \nexport const Block = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${'' /* margin: 10px; */}\n`;\n\nexport const ProjectChild = styled.div`\n  display: inline-block;\n  width: 250px;\n  height: 200px;\n  background-color: #ffffff;\n  opacity: 95%;\n  border-radius: 5px;\n  padding: 10px;\n  ${'' /* box-shadow: \n       inset 0 -2em 2em rgba(0,0,0,0.1), \n             0 0  0 2px rgb(255,255,255),\n             0.2em 0.2em 1em rgba(0,0,0,0.3); */}\n  :hover { \n    ${'' /* cursor: pointer;  */}\n    transition: all .3s ease-in-out;\n    transform: scale(1.02); \n  }\n`;\n\n\nexport const ProjectContainer = styled.div`\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-template-rows: repeat(auto-fill, minmax(200px, 1fr));\n  ${'' /* grid-template-rows: auto; */}\n  justify-items: center;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  margin: 0 45px;\n  padding: 30px;\n\n`;\n\nexport const ProjectDesc = styled.div`\n  width: 100%;\n  height: auto;\n  background-color: #ffffff;\n  opacity: 95%;\n  border-radius: 5px;\n  padding: 10px;\n  margin: 45px 25%;\n`;\n\n","import React, {useState} from 'react';\nimport Nav from '../Navbar';\nimport { Page } from '../styled.js';\n\nconst Homepage = () => {\n\n\n\n  return (\n    <Page>\n    <Nav textColor=\"#f7f7f7\" hoverColor=\"#e17f0b\" activeColor=\"#e17f0b\"/>\n      Homepage progress\n    </Page>\n  )\n}\n\nexport default Homepage;","import React from 'react';\nimport Nav from '../Navbar';\n\nconst About = () => {\n\n  return ( \n    <>\n      <Nav textColor=\"#FFC300\" hoverColor=\"#e17f0b\" activeColor=\"#e17f0b\"/>\n      <div>Put about description here</div>\n    </>\n  )\n}\n\nexport default About;","import React from 'react';\nimport Nav from '../Navbar';\nimport { Link } from 'react-router-dom';\nimport { ProjectContainer, ProjectChild, Container } from '../styled.js';\n\n\nconst Projects = () => {\n\n  return (\n    <>\n      <Nav textColor=\"#FFC300\" hoverColor=\"#e17f0b\" activeColor=\"#e17f0b\"/>\n      Add projects here\n    </>\n  );\n}\n\nexport default Projects;\n\n\n","import React from 'react';\n// import { createGlobalStyle } from 'styled-components'\nimport { \n  BrowserRouter as Router, \n  Switch, \n  Route\n} from 'react-router-dom';\nimport './App.css';\nimport Homepage from './Homepage';\nimport About from './About';\nimport Projects from './Projects';\n\n// const GlobalStyle = createGlobalStyle`\n//   #root {\n//     margin: 0;\n//     padding: 0;\n//     height: 100vh;\n//     overflow: hidden;\n//   }\n// `;\n\n\nfunction App() {\n \n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/projects\" component={Projects} />\n        {/* <Route path=\"/projects/portfolio-website\" component={PortfolioWebsite} />\n        <Route path=\"/projects/whats-my-care\" component={WhatsMyCare} /> */}\n      </Switch>\n    </Router>\n  );\n}\n\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}